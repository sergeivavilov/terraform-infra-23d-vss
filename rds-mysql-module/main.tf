resource "aws_db_instance" "rds_instance" {
  identifier              = var.db_instance_identifier
  allocated_storage       = var.db_allocated_storage
  db_name                 = var.db_name
  engine                  = var.engine
  engine_version          = var.engine_version
  instance_class          = var.instance_class
  username                = var.db_username
  backup_retention_period = var.backup_retention_period
  skip_final_snapshot         = true
  vpc_security_group_ids      = [aws_security_group.rds-sg.id]
  manage_master_user_password = true
  db_subnet_group_name        = aws_db_subnet_group.db_subnet_group.name
  auto_minor_version_upgrade  = true
}

resource "aws_security_group" "rds-sg" {
  name   = "rds_sg"
  vpc_id = var.vpc_id

  ingress {
    from_port       = 5432
    to_port         = 5432
    protocol        = "tcp"
    security_groups = [var.worker_sg]

  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"] # All outbound traffic allowed
  }
  tags = {
    Name = "rds_sg"
  }
}

resource "aws_db_subnet_group" "db_subnet_group" {
  name       = var.db_subnet_group_name
  subnet_ids = var.subnet_ids
}

# this secret will hold all connection info except password
# password will be auto generated by rds and stored in separate secret
resource "aws_secretsmanager_secret" "rds_login" {
  name        = "RDS_connection_final"
  description = "RDS credentials"
  recovery_window_in_days = 0 # will delete secret right away, probably not a good idea for production
}

resource "aws_secretsmanager_secret_version" "RDS_connection_points" {
  secret_id = aws_secretsmanager_secret.rds_login.id
  secret_string = jsonencode({
    DB_USERNAME = var.db_username
    DB_ENDPOINT = aws_db_instance.rds_instance.endpoint
    DB_NAME     = var.db_name
  })
}