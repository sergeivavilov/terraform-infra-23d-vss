./eks-module/workers.tf
locals {
  version = "1.29"
}
data "aws_ssm_parameter" "eks_ami_id" {
  name = "/aws/service/eks/optimized-ami/${local.version}/amazon-linux-2/recommended/image_id"
}

resource "aws_launch_template" "eks_workers" {
  name_prefix   = var.worker_lt_name_prefix
  image_id      = data.aws_ssm_parameter.eks_ami_id.value
  instance_type = var.worker_lt_inst_type

    # #!/bin/bash
    # set -o xtrace
    # /etc/eks/bootstrap.sh project-x-dev

# iam::aws:policy/AmazonEKSWorkerNodePolicy"
# iam::aws:policy/AmazonEKS_CNI_Policy"
# iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

}

resource "aws_autoscaling_group" "eks_workers" {
  capacity_rebalance  = true
  desired_capacity    = var.worker_asg_desired_cap
  max_size            = var.worker_asg_max_size
  min_size            = var.worker_asg_min_size
  vpc_zone_identifier = var.eks_vpc_subnet_ids

  mixed_instances_policy {
    instances_distribution {
      on_demand_base_capacity                  = var.worker_asg_base_cap
      on_demand_percentage_above_base_capacity = var.worker_asg_percent_base_cap
      spot_allocation_strategy                 = var.worker_asg_spot_strategy
    }

    launch_template {
      launch_template_specification {
        launch_template_id = aws_launch_template.eks_workers.id
      }

      override {
        instance_type     = var.override_inst_type_1
        weighted_capacity = var.override_weight_cap_1
      }

      override {
        instance_type     = var.override_inst_type_2
        weighted_capacity = var.override_weight_cap_2
      }
    }
  }
}

# resource "aws_iam_role" "example" {
#   name = "eks-node-group-example"

#   assume_role_policy = jsonencode({
#     Statement = [{
#       Action = "sts:AssumeRole"
#       Effect = "Allow"
#       Principal = {
#         Service = "ec2.amazonaws.com"
#       }
#     }]
#     Version = "2012-10-17"
#   })
# }

# resource "aws_iam_role_policy_attachment" "example-AmazonEKSWorkerNodePolicy" {
#   policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
#   role       = aws_iam_role.example.name
# }

# resource "aws_iam_role_policy_attachment" "example-AmazonEKS_CNI_Policy" {
#   policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
#   role       = aws_iam_role.example.name
# }

# resource "aws_iam_role_policy_attachment" "example-AmazonEC2ContainerRegistryReadOnly" {
#   policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
#   role       = aws_iam_role.example.name
# }

./eks-module/variables.tf
### EKS Cluster variables ###

variable "eks_name" {
  type = string
  default = "project-x-dev"
}

variable "eks_version" {
  type = string
  default = "1.29"
}

variable "eks_vpc_subnet_ids" {
  type = list(string)
  default = ["subnet-0d5fc4ce23b5cb89a", "subnet-06e01dd0cc5e788b9"]  # Subnets in us-east-1a and us-east-1b
}

variable "k8_net_config_cidr" {
  type = string
  default = "10.7.0.0/16"
}

variable "tag_name" {
  type = string
  default = "project-x"  
}

### Trust Policy variables ###

variable "iam_pol_effect" {
  type = string
  default = "Allow"
}

variable "iam_pol_prin_type" {
  type = string
  default = "Service"
}

variable "iam_pol_prin_identifiers" {
  type = list(string)
  default = ["eks.amazonaws.com"]
}

variable "iam_pol_actions" {
  type = list(string)
  default = ["sts:AssumeRole"]
}

### IAM role variables ###

variable "iam_role_name" {
  type = string
  default = "project-x-dev-eks-iam-role"
}

### IAM role policy attachment variables ###

variable "iam_role_policy_arn" {
  type = string
  default = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

### EKS Cluster SG variables ###

variable "eks_sg_name" {
  type = string
  default = "EKS Cluster Security Group"
}

variable "eks_sg_description" {
  type = string
  default = "Allow All inbound traffic from Self and all outbound traffic"
}

variable "eks_sg_vpc_id" {
  type = string
  default = "vpc-064f95e6b9ba1df03"  # default VPC ID
}

variable "eks_sg_tag" {
  type = map(string)
  default = {
    Name = "eks-cluster-sg"
    "kubernetes.io/cluster/project-x-dev" = "owned"
    "aws:eks:cluster-name"	= "project-x-dev"
  }
}

variable "sg_all_port_protocol" {
  type = string
  default = "-1" # semantically equivalent to all ports
}

variable "sg_all_ipv4_traffic" {
  type = string
  default = "0.0.0.0/0"
}

variable "sg_all_ipv6_traffic" {
  type = string
  default = "::/0"
}

variable "sg_allow_tls_port" {
  type = number
  default = 443 
}

### WORKERS variables ###

variable "worker_lt_name_prefix" {
  type = string
  default = "project-x-eks-dev-worker-nodes"
}

variable "worker_lt_inst_type" {
  type = string
  default = "t3.medium"
}

### Worker ASG variables ###

variable "worker_asg_desired_cap" {
  type = number
  default = 2
}

variable "worker_asg_max_size" {
  type = number
  default = 3
}

variable "worker_asg_min_size" {
  type = number
  default = 1
}

### Worker ASG mixed instance policy variables ###

variable "worker_asg_base_cap" {
  type = number
  default = 0
}

variable "worker_asg_percent_base_cap" {
  type = number
  default = 0
}

variable "worker_asg_spot_strategy" {
  type = string
  default = "capacity-optimized"
}

### Worker ASG launch template variables ###

variable "override_inst_type_1" {
  type = string
  default = "t3.medium"
}

variable "override_weight_cap_1" {
  type = string
  default = "2"
}

variable "override_inst_type_2" {
  type = string
  default = "t2.medium"
}

variable "override_weight_cap_2" {
  type = string
  default = "2"
}

./eks-module/eks.tf
resource "aws_eks_cluster" "cluster" {
  name     = var.eks_name
  role_arn = aws_iam_role.eks_cluster_role.arn
  version  = var.eks_version

  vpc_config {
    subnet_ids = var.eks_vpc_subnet_ids
    security_group_ids = [aws_security_group.eks_cluster_sg.id]
  }

  kubernetes_network_config {
    service_ipv4_cidr = var.k8_net_config_cidr
  }

  # Ensure that IAM Role permissions are created before and deleted after EKS Cluster handling.
  # Otherwise, EKS will not be able to properly delete EKS managed EC2 infrastructure such as Security Groups.
  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_role-AmazonEKSClusterPolicy
  ]

  tags = {
    Name = var.tag_name
  }
}

# trust policy for the role
data "aws_iam_policy_document" "assume_role" {
  statement {
    effect = var.iam_pol_effect

    principals {
      type        = var.iam_pol_prin_type
      identifiers = var.iam_pol_prin_identifiers
    }

    actions = var.iam_pol_actions
  }
}

# create IAM role
resource "aws_iam_role" "eks_cluster_role" {
  name               = var.iam_role_name
  assume_role_policy = data.aws_iam_policy_document.assume_role.json
}

# attach policy to the role
resource "aws_iam_role_policy_attachment" "eks_cluster_role-AmazonEKSClusterPolicy" {
  policy_arn = var.iam_role_policy_arn
  role       = aws_iam_role.eks_cluster_role.name
}


resource "aws_security_group" "eks_cluster_sg" {
  name        = var.eks_sg_name
  description = var.eks_sg_description
  vpc_id      = var.eks_sg_vpc_id

  tags = var.eks_sg_tag
}

resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
  security_group_id = aws_security_group.eks_cluster_sg.id
  referenced_security_group_id         = aws_security_group.eks_cluster_sg.id
  from_port         = var.sg_allow_tls_port
  ip_protocol       = "tcp"
  to_port           = var.sg_allow_tls_port
}

resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
  security_group_id = aws_security_group.eks_cluster_sg.id
  cidr_ipv4         = var.sg_all_ipv4_traffic
  ip_protocol       = var.sg_all_port_protocol
}

resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv6" {
  security_group_id = aws_security_group.eks_cluster_sg.id
  cidr_ipv6         = var.sg_all_ipv6_traffic
  ip_protocol       = var.sg_all_port_protocol
}

# 
output "endpoint" {
  value = aws_eks_cluster.cluster.endpoint
}

output "kubeconfig-certificate-authority-data" {
  value = aws_eks_cluster.cluster.certificate_authority[0].data
}

./root/main-eks-root/main.tf
module "project-x-eks-cluster" {
  source = "../../eks-module"

  ### eks.tf ###
  eks_name = var.eks_name
  eks_version = var.eks_version
  eks_vpc_subnet_ids = var.eks_vpc_subnet_ids
  k8_net_config_cidr = var.k8_net_config_cidr
  tag_name = var.tag_name
  iam_pol_effect = var.iam_pol_effect
  iam_pol_prin_type = var.iam_pol_prin_type
  iam_pol_prin_identifiers = var.iam_pol_prin_identifiers
  iam_pol_actions = var.iam_pol_actions
  iam_role_name = var.iam_role_name
  iam_role_policy_arn = var.iam_role_policy_arn
  eks_sg_name = var.eks_sg_name
  eks_sg_description = var.eks_sg_description
  eks_sg_vpc_id = var.eks_sg_vpc_id
  eks_sg_tag = var.eks_sg_tag
  sg_allow_tls_port = var.sg_allow_tls_port
  sg_all_ipv4_traffic = var.sg_all_ipv4_traffic
  sg_all_port_protocol = var.sg_all_port_protocol
  sg_all_ipv6_traffic = var.sg_all_ipv6_traffic

  ### workers.tf ###
  worker_lt_name_prefix = var.worker_lt_name_prefix
  worker_lt_inst_type =  var.worker_lt_inst_type
  worker_asg_desired_cap = var.worker_asg_desired_cap
  worker_asg_max_size = var.worker_asg_max_size
  worker_asg_min_size = var.worker_asg_min_size
  worker_asg_base_cap = var.worker_asg_base_cap
  worker_asg_percent_base_cap = var.worker_asg_percent_base_cap
  worker_asg_spot_strategy = var.worker_asg_spot_strategy
  override_inst_type_1 = var.override_inst_type_1
  override_weight_cap_1 = var.override_weight_cap_1
  override_inst_type_2 = var.override_inst_type_2
  override_weight_cap_2 = var.override_weight_cap_2
}

./root/main-eks-root/providers.tf
# Providers.tf
provider "aws" {
  region = "us-east-1"
}

terraform {
  backend "s3" {
    bucket  = "githubactions-terraform-task"
    key     = "terraform.tfstate"
    region  = "us-east-1"
    encrypt = true
  }
}

./root/main-eks-root/mainvars.tf
### EKS Cluster variables ###

variable "eks_name" {
  type = string
  default = "project-x-dev"
}

variable "eks_version" {
  type = string
  default = "1.29"
}

variable "eks_vpc_subnet_ids" {
  type = list(string)
  default = ["subnet-0d5fc4ce23b5cb89a", "subnet-06e01dd0cc5e788b9"]  # Subnets in us-east-1a and us-east-1b
}

variable "k8_net_config_cidr" {
  type = string
  default = "10.7.0.0/16"
}

variable "tag_name" {
  type = string
  default = "project-x"  
}

### Trust Policy variables ###

variable "iam_pol_effect" {
  type = string
  default = "Allow"
}

variable "iam_pol_prin_type" {
  type = string
  default = "Service"
}

variable "iam_pol_prin_identifiers" {
  type = list(string)
  default = ["eks.amazonaws.com"]
}

variable "iam_pol_actions" {
  type = list(string)
  default = ["sts:AssumeRole"]
}

### IAM role variables ###


# variable "iam_role_name" {
#   type = string
#   default = "GitHubActionsTerraformIAMrole"  # Name of the IAM role for GitHub Actions
# }

variable "iam_role_name" {
  type = string
  default = "project-x-dev-eks-iam-role"
}

### IAM role policy attachment variables ###

variable "iam_role_policy_arn" {
  type = string
  default = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

### EKS Cluster SG variables ###

variable "eks_sg_name" {
  type = string
  default = "EKS Cluster Security Group"
}

variable "eks_sg_description" {
  type = string
  default = "Allow All inbound traffic from Self and all outbound traffic"
}

variable "eks_sg_vpc_id" {
  type = string
  default = "vpc-064f95e6b9ba1df03"  # default VPC ID
}

variable "eks_sg_tag" {
  type = map(string)
  default = {
    Name = "eks-cluster-sg"
    "kubernetes.io/cluster/project-x-dev" = "owned"
    "aws:eks:cluster-name"	= "project-x-dev"
  }
}

variable "sg_all_port_protocol" {
  type = string
  default = "-1" # semantically equivalent to all ports
}

variable "sg_all_ipv4_traffic" {
  type = string
  default = "0.0.0.0/0"
}

variable "sg_all_ipv6_traffic" {
  type = string
  default = "::/0"
}

variable "sg_allow_tls_port" {
  type = number
  default = 0 
}

### WORKERS variables ###

variable "worker_lt_name_prefix" {
  type = string
  default = "project-x-eks-dev-worker-nodes"
}

variable "worker_lt_inst_type" {
  type = string
  default = "t3.medium"
}

### Worker ASG variables ###

variable "worker_asg_desired_cap" {
  type = number
  default = 2
}

variable "worker_asg_max_size" {
  type = number
  default = 3
}

variable "worker_asg_min_size" {
  type = number
  default = 1
}

### Worker ASG mixed instance policy variables ###

variable "worker_asg_base_cap" {
  type = number
  default = 0
}

variable "worker_asg_percent_base_cap" {
  type = number
  default = 0
}

variable "worker_asg_spot_strategy" {
  type = string
  default = "capacity-optimized"
}

### Worker ASG launch template variables ###

variable "override_inst_type_1" {
  type = string
  default = "t3.medium"
}

variable "override_weight_cap_1" {
  type = string
  default = "2"
}

variable "override_inst_type_2" {
  type = string
  default = "t2.medium"
}

variable "override_weight_cap_2" {
  type = string
  default = "2"
}

